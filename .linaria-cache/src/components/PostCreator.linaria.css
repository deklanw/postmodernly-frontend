.c1337thp{background-color:white;border:1px #c4c4c4 solid;border-radius:5px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGVrbGFuXFxEb2N1bWVudHNcXENvZGVcXHBvc3Rwb3N0bW9kZXJubHlcXGZyb250ZW5kIHdlYnBhY2tcXHNyY1xcY29tcG9uZW50c1xcUG9zdENyZWF0b3IudHN4Il0sIm5hbWVzIjpbIi5jMTMzN3RocCJdLCJtYXBwaW5ncyI6IkFBdUJNQSIsImZpbGUiOiJDOlxcVXNlcnNcXGRla2xhblxcRG9jdW1lbnRzXFxDb2RlXFxwb3N0cG9zdG1vZGVybmx5XFxmcm9udGVuZCB3ZWJwYWNrXFxzcmNcXGNvbXBvbmVudHNcXFBvc3RDcmVhdG9yLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnbGluYXJpYS9yZWFjdCc7XG5pbXBvcnQgeyBrbnV0aFNodWZmbGUgfSBmcm9tICdrbnV0aC1zaHVmZmxlJztcblxuaW1wb3J0IHsgRnJhZ21lbnQsIEJvb2tzSW5mbyB9IGZyb20gJy4vc2hhcmVkL3R5cGVzJztcbmltcG9ydCBTZWxlY3Rpb25BbmRDb250cm9sc0JveCBmcm9tICcuL1NlbGVjdGlvbkFuZENvbnRyb2xzQm94JztcbmltcG9ydCB7XG4gIHVzZUdldE5ld1Bvc3RPcHRpb25zTXV0YXRpb24sXG4gIHVzZUdldFBvc3RPcHRpb25zTXV0YXRpb24sXG4gIHVzZU1ha2VQb3N0TXV0YXRpb24sXG4gIEJvb2tGcmFnbWVudE9wdGlvbnNcbn0gZnJvbSAnLi4vZ2VuZXJhdGVkL2dyYXBocWwnO1xuaW1wb3J0IE9wdGlvbnNCb3ggZnJvbSAnLi9PcHRpb25zQm94JztcbmltcG9ydCBHZW5lcmljRXJyb3IgZnJvbSAnLi9HZW5lcmljRXJyb3InO1xuXG5mdW5jdGlvbiBpbW11dGFibGVTaHVmZmxlPFQ+KGFycjogVFtdKTogVFtdIHtcbiAgY29uc3QgbmV3QXJyYXkgPSBhcnIuc2xpY2UoKTtcbiAgcmV0dXJuIGtudXRoU2h1ZmZsZShuZXdBcnJheSk7XG59XG5jb25zdCBpbml0U2VsZWN0ZWRGcmFnbWVudHM6IEZyYWdtZW50W10gPSBbXTtcbmNvbnN0IGluaXRGcmFnbWVudE9wdGlvbnM6IEZyYWdtZW50W10gPSBbXTtcbmNvbnN0IGluaXRCb29rSW5mbzogQm9va3NJbmZvIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggI2M0YzRjNCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuYDtcblxuY29uc3QgZm9ybWF0T3B0aW9ucyA9IChcbiAgYm9vazFPcHRpb25zOiBCb29rRnJhZ21lbnRPcHRpb25zLFxuICBib29rMk9wdGlvbnM6IEJvb2tGcmFnbWVudE9wdGlvbnNcbikgPT4ge1xuICBjb25zdCByZWZvcm1hdHRlZEJvb2sxT3B0aW9uczogRnJhZ21lbnRbXSA9IGJvb2sxT3B0aW9ucy5mcmFnbWVudE9wdGlvbnMubWFwKFxuICAgIGVsID0+ICh7XG4gICAgICBmcmFnbWVudFRleHQ6IGVsLmZyYWdtZW50LmZyYWdtZW50VGV4dCxcbiAgICAgIGZyYWdtZW50SWQ6IHBhcnNlSW50KGVsLmZyYWdtZW50LmlkKSxcbiAgICAgIG9yZGVyOiBlbC5vcmRlcixcbiAgICAgIGJvb2tJZDogcGFyc2VJbnQoYm9vazFPcHRpb25zLmJvb2suaWQpLFxuICAgICAgd2hpY2hCb29rOiB0cnVlXG4gICAgfSlcbiAgKTtcblxuICBjb25zdCByZWZvcm1hdHRlZEJvb2syT3B0aW9uczogRnJhZ21lbnRbXSA9IGJvb2syT3B0aW9ucy5mcmFnbWVudE9wdGlvbnMubWFwKFxuICAgIGVsID0+ICh7XG4gICAgICBmcmFnbWVudFRleHQ6IGVsLmZyYWdtZW50LmZyYWdtZW50VGV4dCxcbiAgICAgIGZyYWdtZW50SWQ6IHBhcnNlSW50KGVsLmZyYWdtZW50LmlkKSxcbiAgICAgIG9yZGVyOiBlbC5vcmRlcixcbiAgICAgIGJvb2tJZDogcGFyc2VJbnQoYm9vazJPcHRpb25zLmJvb2suaWQpLFxuICAgICAgd2hpY2hCb29rOiBmYWxzZVxuICAgIH0pXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICByZWZvcm1hdHRlZEJvb2tPcHRpb25zOiByZWZvcm1hdHRlZEJvb2sxT3B0aW9uc1xuICAgICAgLmNvbmNhdChyZWZvcm1hdHRlZEJvb2syT3B0aW9ucylcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlciksXG4gICAgYm9va0luZm9zOiB7XG4gICAgICBib29rMUluZm86IHtcbiAgICAgICAgaWQ6IHBhcnNlSW50KGJvb2sxT3B0aW9ucy5ib29rLmlkKSxcbiAgICAgICAgdGl0bGU6IGJvb2sxT3B0aW9ucy5ib29rLnRpdGxlLFxuICAgICAgICBhdXRob3I6IGJvb2sxT3B0aW9ucy5ib29rLmF1dGhvci5uYW1lXG4gICAgICB9LFxuICAgICAgYm9vazJJbmZvOiB7XG4gICAgICAgIGlkOiBwYXJzZUludChib29rMk9wdGlvbnMuYm9vay5pZCksXG4gICAgICAgIHRpdGxlOiBib29rMk9wdGlvbnMuYm9vay50aXRsZSxcbiAgICAgICAgYXV0aG9yOiBib29rMk9wdGlvbnMuYm9vay5hdXRob3IubmFtZVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmNvbnN0IFBvc3RDcmVhdG9yID0gKCkgPT4ge1xuICBjb25zdCBnZXROZXdQb3N0T3B0aW9ucyA9IHVzZUdldE5ld1Bvc3RPcHRpb25zTXV0YXRpb24oKTtcbiAgY29uc3QgZ2V0UG9zdE9wdGlvbnMgPSB1c2VHZXRQb3N0T3B0aW9uc011dGF0aW9uKCk7XG4gIGNvbnN0IG1ha2VQb3N0ID0gdXNlTWFrZVBvc3RNdXRhdGlvbigpO1xuXG4gIGNvbnN0IFtcbiAgICBzZWxlY3Rpb25BbmRDb250cm9sQm94TG9hZGluZyxcbiAgICBzZXRTZWxlY3Rpb25BbmRDb250cm9sQm94TG9hZGluZ1xuICBdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbb3B0aW9uc0JveExvYWRpbmcsIHNldE9wdGlvbnNCb3hMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIGNvbnN0IFtvcmRlcmVkRnJhZ21lbnRzLCBzZXRGcmFnbWVudHNdID0gdXNlU3RhdGUoaW5pdEZyYWdtZW50T3B0aW9ucyk7XG4gIGNvbnN0IFtzZWxlY3RlZEZyYWdtZW50cywgc2V0U2VsZWN0ZWRGcmFnbWVudHNdID0gdXNlU3RhdGUoXG4gICAgaW5pdFNlbGVjdGVkRnJhZ21lbnRzXG4gICk7XG4gIGNvbnN0IFtib29rSW5mbywgc2V0Qm9va0luZm9dID0gdXNlU3RhdGU8Qm9va3NJbmZvIHwgdW5kZWZpbmVkPihpbml0Qm9va0luZm8pO1xuICBjb25zdCBbZXJyb3JlZCwgc2V0RXJyb3JlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgZ2V0RnJhZ21lbnRPcHRpb25zID0gYXN5bmMgKG5ld09wdGlvbnM6IGJvb2xlYW4pID0+IHtcbiAgICBzZXRPcHRpb25zQm94TG9hZGluZyh0cnVlKTtcbiAgICBjb25zdCBnZXQgPSBuZXdPcHRpb25zID8gZ2V0TmV3UG9zdE9wdGlvbnMgOiBnZXRQb3N0T3B0aW9ucztcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGdldCgpO1xuXG4gICAgICBjb25zdCBvcHRpb25zID0gZGF0YS5nZXRQb3N0T3B0aW9ucyB8fCBkYXRhLmdldE5ld1Bvc3RPcHRpb25zO1xuXG4gICAgICBpZiAob3B0aW9ucy5wb3N0T3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJvb2sxT3B0aW9ucywgYm9vazJPcHRpb25zIH0gPSBvcHRpb25zLnBvc3RPcHRpb25zO1xuXG4gICAgICAgIGNvbnN0IHsgcmVmb3JtYXR0ZWRCb29rT3B0aW9ucywgYm9va0luZm9zIH0gPSBmb3JtYXRPcHRpb25zKFxuICAgICAgICAgIGJvb2sxT3B0aW9ucyxcbiAgICAgICAgICBib29rMk9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgc2V0RnJhZ21lbnRzKHJlZm9ybWF0dGVkQm9va09wdGlvbnMpO1xuICAgICAgICBzZXRCb29rSW5mbyhib29rSW5mb3MpO1xuICAgICAgICBzZXRPcHRpb25zQm94TG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0RXJyb3JlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldFNlbGVjdGlvbkFuZENvbnRyb2xCb3hMb2FkaW5nKHRydWUpO1xuICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgZnJhZ21lbnRzOiBzZWxlY3RlZEZyYWdtZW50cy5tYXAoKGVsLCBpKSA9PiAoe1xuICAgICAgICBmcmFnbWVudElkOiBlbC5mcmFnbWVudElkLFxuICAgICAgICBvcmRlcjogaVxuICAgICAgfSkpXG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBtYWtlUG9zdCh7XG4gICAgICAgIHZhcmlhYmxlczogeyBkYXRhOiBpbnB1dCB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRhdGEubWFrZVBvc3QpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRGcmFnbWVudHMoW10pO1xuICAgICAgICBzZXRGcmFnbWVudHMoW10pO1xuICAgICAgICBnZXRGcmFnbWVudE9wdGlvbnModHJ1ZSk7XG4gICAgICAgIHNldFNlbGVjdGlvbkFuZENvbnRyb2xCb3hMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZXRFcnJvcmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRGcmFnbWVudFNlbGVjdGlvbiA9IChmcmFnbWVudDogRnJhZ21lbnQpID0+XG4gICAgc2V0U2VsZWN0ZWRGcmFnbWVudHMoWy4uLnNlbGVjdGVkRnJhZ21lbnRzLCBmcmFnbWVudF0pO1xuXG4gIGNvbnN0IGNsZWFyU2VsZWN0ZWRGcmFnbWVudHMgPSAoKSA9PiBzZXRTZWxlY3RlZEZyYWdtZW50cyhbXSk7XG5cbiAgY29uc3QgcmVtb3ZlRnJhZ21lbnRTZWxlY3Rpb24gPSAoZnJhZ21lbnRJZDogbnVtYmVyKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRGcmFnbWVudHMoXG4gICAgICBzZWxlY3RlZEZyYWdtZW50cy5maWx0ZXIoZWwgPT4gZWwuZnJhZ21lbnRJZCAhPT0gZnJhZ21lbnRJZClcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0U2VsZWN0ZWQgPSAoKSA9PiBzZXRTZWxlY3RlZEZyYWdtZW50cyhbXSk7XG5cbiAgY29uc3Qgc2h1ZmZsZUZyYWdtZW50cyA9ICgpID0+IHtcbiAgICBzZXRGcmFnbWVudHMoaW1tdXRhYmxlU2h1ZmZsZShvcmRlcmVkRnJhZ21lbnRzKSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnZXRGcmFnbWVudE9wdGlvbnMoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgbGV0IGNvbnRlbnQgPSBudWxsO1xuXG4gIGlmIChlcnJvcmVkKSB7XG4gICAgY29udGVudCA9IDxHZW5lcmljRXJyb3IgLz47XG4gIH0gZWxzZSB7XG4gICAgY29udGVudCA9IChcbiAgICAgIDw+XG4gICAgICAgIDxTZWxlY3Rpb25BbmRDb250cm9sc0JveFxuICAgICAgICAgIHJlbW92ZUZyYWdtZW50U2VsZWN0aW9uPXtyZW1vdmVGcmFnbWVudFNlbGVjdGlvbn1cbiAgICAgICAgICBzZWxlY3RlZEZyYWdtZW50cz17c2VsZWN0ZWRGcmFnbWVudHN9XG4gICAgICAgICAgcmVzZXRTZWxlY3RlZD17cmVzZXRTZWxlY3RlZH1cbiAgICAgICAgICBoYW5kbGVTdWJtaXQ9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgICBsb2FkaW5nPXtzZWxlY3Rpb25BbmRDb250cm9sQm94TG9hZGluZyB8fCBvcHRpb25zQm94TG9hZGluZ31cbiAgICAgICAgLz5cbiAgICAgICAgPE9wdGlvbnNCb3hcbiAgICAgICAgICBnZXROZXdGcmFnbWVudE9wdGlvbnM9eygpID0+IGdldEZyYWdtZW50T3B0aW9ucyh0cnVlKX1cbiAgICAgICAgICBzaHVmZmxlRnJhZ21lbnRzPXtzaHVmZmxlRnJhZ21lbnRzfVxuICAgICAgICAgIGFkZEZyYWdtZW50U2VsZWN0aW9uPXthZGRGcmFnbWVudFNlbGVjdGlvbn1cbiAgICAgICAgICBjbGVhclNlbGVjdGVkRnJhZ21lbnRzPXtjbGVhclNlbGVjdGVkRnJhZ21lbnRzfVxuICAgICAgICAgIG9yZGVyZWRGcmFnbWVudHM9e29yZGVyZWRGcmFnbWVudHN9XG4gICAgICAgICAgc2VsZWN0ZWRGcmFnbWVudHM9e3NlbGVjdGVkRnJhZ21lbnRzfVxuICAgICAgICAgIGJvb2tJbmZvPXtib29rSW5mb31cbiAgICAgICAgICBsb2FkaW5nPXtzZWxlY3Rpb25BbmRDb250cm9sQm94TG9hZGluZyB8fCBvcHRpb25zQm94TG9hZGluZ31cbiAgICAgICAgLz5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gPENvbnRhaW5lcj57Y29udGVudH08L0NvbnRhaW5lcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3N0Q3JlYXRvcjtcbiJdfQ==*/